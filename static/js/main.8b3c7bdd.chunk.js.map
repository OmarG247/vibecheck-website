{"version":3,"sources":["img/play_color.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","Grid","stackable","style","height","padding","Row","verticalAlign","Column","textAlign","width","Image","className","centered","right","src","logo","stretched","Container","fontFamily","color","fontWeight","bottom","fontSize","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,wC,mOC4D5BC,EAtDH,WACV,OACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAAEC,OAAQ,QAASC,QAAS,SACjD,kBAACJ,EAAA,EAAKK,IAAN,CAAUC,cAAc,UACtB,kBAACN,EAAA,EAAKO,OAAN,CAAaC,UAAU,QAAQC,MAAO,GACpC,kBAACC,EAAA,EAAD,CAAOC,UAAU,YAAYC,UAAQ,EAACV,MAAO,CAAEW,MAAO,GAAKC,IAAKC,OAElE,kBAACf,EAAA,EAAKO,OAAN,CAAaS,WAAS,EAACP,MAAO,IAC5B,kBAACQ,EAAA,EAAD,CAAWT,UAAU,QACnB,wBAAIG,UAAU,QAAQT,MAAO,CAC3BgB,WAAY,OACZC,MAAO,UAFT,qBAMA,wBAAIR,UAAU,WAAWT,MAAO,CAC9BgB,WAAY,YACZE,WAAY,IACZD,MAAO,UAHT,qBAOA,yBAAKjB,MAAO,CAAEmB,OAAQ,IACpB,uBAAGnB,MAAO,CACRgB,WAAY,YACZE,WAAY,IACZE,SAAU,SACVH,MAAO,UAJT,0BAM0B,IACtB,uBAAGR,UAAU,UAAUY,KAAK,2BAA2BrB,MAAO,CAAEiB,MAAO,YACrE,+CAED,KACD,uBAAGR,UAAU,UAAUY,KAAK,2BAA2BrB,MAAO,CAAEiB,MAAO,YACrE,6CAED,KACD,uBAAGR,UAAU,UAAUY,KAAK,yBAAyBrB,MAAO,CAAEiB,MAAO,YACnE,kDAED,MACD,uBAAGR,UAAU,UAAUY,KAAK,kCAAkCrB,MAAO,CAAEiB,MAAO,YAC5E,oDCrCAK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b3c7bdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play_color.bac2834c.svg\";","import React from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport { Grid, Image, Container } from 'semantic-ui-react'\nimport logo from './img/play_color.svg';\n\nconst App = () => {\n  return (\n    <Grid stackable style={{ height: '100vh', padding: '2rem' }}>\n      <Grid.Row verticalAlign=\"middle\">\n        <Grid.Column textAlign=\"right\" width={6}>\n          <Image className=\"main-logo\" centered style={{ right: 0 }} src={logo} />\n        </Grid.Column>\n        <Grid.Column stretched width={10}>\n          <Container textAlign=\"left\">\n            <h1 className=\"title\" style={{\n              fontFamily: 'Sail',\n              color: 'black'\n            }}>\n              What's the story?\n            </h1>\n            <h2 className=\"subtitle\" style={{\n              fontFamily: 'Work Sans',\n              fontWeight: 300,\n              color: 'black',\n            }}>\n              Coming March 2020\n            </h2>\n            <div style={{ bottom: 0 }}>\n              <p style={{\n                fontFamily: 'Work Sans',\n                fontWeight: 400,\n                fontSize: '1.2rem',\n                color: 'black',\n              }}>\n                A project developed by:{' '} \n                  <a className=\"profile\" href=\"http://jacobdanovitch.me\" style={{ color: '#5187F0' }}>\n                    <b>Jacob Danovitch</b>\n                  </a>\n                  {\", \"}\n                  <a className=\"profile\" href=\"https://github.com/faris\" style={{ color: '#FFC300' }}>\n                    <b>Faris Mohamed</b>\n                  </a>\n                  {\", \"}\n                  <a className=\"profile\" href=\"https://omarflores.dev\" style={{ color: '#8600B6' }}>\n                    <b>Omar Garcia Flores</b>\n                  </a>\n                  {\" & \"}\n                  <a className=\"profile\" href=\"https://github.com/nathanembaye\" style={{ color: '#FF351A' }}>\n                    <b>Nathan Embaye</b>\n                  </a>\n              </p>\n            </div>\n          </Container>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}